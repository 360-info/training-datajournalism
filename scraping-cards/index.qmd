---
title: "Scraping cards"
resources: suburbs.yml
listing:
  id: suburbs
  contents: ["suburbs.yml"]
  sort: ["name"]
  type: grid
---

For this demo, we've set up what looks like a state government dashboard, with some statistics for each suburb in Melbourne (that I made up). Each "card" has a number of relevant pieces of information.

How would we go about extracting the info from these cards into Google Sheets? If it was a `<table>`, we could use the `importhtml()` function to get the whole thing in one go.

We can't do that this time—it isn't a table. But we can use Google Sheets' more general `importxml()` function to gets lists of things, and we can tell it exactly what we want.

:::{.callout-note}
I've cheated and created this listing from a spreadsheet myself—but it mimics the sorts of listings you'll see on product listings and dashboards all over the internet.

```{r}
#| label: download-census-data
#| code-fold: true
library(tidyverse)
library(readxl)
library(yaml)
library(here)

zip_path <- here("scraping-cards", "vic-stats.zip")
zip_url <- paste0(
  "https://www.abs.gov.au/",
  "census/find-census-data/datapacks/download/",
  "2021_GCP_SAL_for_VIC_short-header.zip")
download.file(zip_url, zip_path)
unzip(zip_path, exdir = here("scraping-cards", "data"))
file.rename(
  here("scraping-cards", "data", "2021 Census GCP Suburbs and Localities for VIC"),
  here("scraping-cards", "data", "Responses"))
```

```{r}
#| label: select-cols
#| code-fold: true

# suburb codes and names
here("scraping-cards", "data", "Metadata",
  "2021Census_geog_desc_1st_2nd_3rd_release.xlsx") |>
  read_excel(sheet = "2021_ASGS_Non_ABS_Structures") |>
  filter(ASGS_Structure == "SAL") |>
  select(Code = Census_Code_2021, Name = Census_Name_2021) ->
suburb_map

# total population
here("scraping-cards", "data", "Responses", "2021Census_G01_VIC_SAL.csv") |>
  read_csv(col_select = c(SAL_CODE_2021, Tot_P_P)) |>
  mutate(`Total population` = as.integer(Tot_P_P)) |>
  select(SAL_CODE_2021, `Total population`) ->
population

# income and rent
here("scraping-cards", "data", "Responses", "2021Census_G02_VIC_SAL.csv") |>
  read_csv(col_select =
    c(SAL_CODE_2021, Median_rent_weekly, Median_tot_fam_inc_weekly)) |>
  rename(
    `Median weekly rent` = Median_rent_weekly,
    `Median weekly family income` = Median_tot_fam_inc_weekly) ->
income_and_rent

# commuting:
# we just want the most popular commute method for each area,
# which i'll encode as emoji
here("scraping-cards", "data", "Responses", "2021Census_G62_VIC_SAL.csv") |>
  read_csv(
    col_types = cols(SAL_CODE_2021 = col_character(), .default = col_integer()),
    col_select = c(SAL_CODE_2021, ends_with("_P"))) |>
  select(SAL_CODE_2021, matches("One_method"), matches("Two_methods"),
    matches("Three_meth"), -matches("Tot")) |>
  pivot_longer(-SAL_CODE_2021, names_to = "method", values_to = "count") |>
  filter(count > 0) |>
  group_by(SAL_CODE_2021) |>
  slice_max(count, n = 1) |>
  ungroup() |>
  mutate("Most popular commute method" = str_replace_all(method, c(
    "Train" = "🚂",
    "Trn" = "🚂",
    "Bus" = "🚌",
    "Ferry" = "⛴️",
    "Car_as_driver" = "🚗 D",
    "Car_as_drvr" = "🚗 D",
    "Car_as_passenger" = "🚗 P",
    "Car_as_pass" = "🚗 P",
    "Truck" = "🚚",
    "Motorbike_scootr" = "🛵",
    "Other" = "❓",
    "Walked_only" = "🚶🏻",
    "_P" = "",
    "Tr_2_oth_meth" = "🚂 + 2",
    "Othr_three_meth" = "❓ + 2",
    "One_method" = "",
    "Two_methods" = "",
    "Three_meth" = "",
    "_" = " "))) |>
  select(-method, -count) ->
commuting_mostpopular
```

```{r}
#| label: join-datasets
#| code-fold: true

# join and write out to yaml (so we can make a listing)
population |>
  left_join(income_and_rent, join_by(SAL_CODE_2021)) |>
  left_join(income_and_rent, join_by(SAL_CODE_2021)) |>
  left_join(commuting_mostpopular, join_by(SAL_CODE_2021)) |>
  left_join(suburb_map, join_by(SAL_CODE_2021 == Code)) |>
  select(Name, Code = SAL_CODE_2021, everything()) |>
  mutate(`Total population` = as.integer(`Total population`)) |>
  filter(`Total population` > 0) ->
joined

write_yaml(joined, here("scraping-cards", "suburbs.yml"), column.major = FALSE)
```
:::

:::{#suburbs}
:::
