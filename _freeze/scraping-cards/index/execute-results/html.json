{
  "hash": "dc986b3ab556e2f821e17485eec2a5e6",
  "result": {
    "markdown": "---\ntitle: \"Scraping cards\"\nlisting:\n  id: suburbs\n  contents: [\"suburbs.yml\"]\n  sort: [\"name\"]\n  type: grid\n  \n---\n\n\nFor this demo, we've set up what looks like a state government dashboard, with some statistics for each suburb in Melbourne (that I made up). Each \"card\" has a number of relevant pieces of information.\n\nHow would we go about extracting the info from these cards into Google Sheets? If it was a `<table>`, we could use the `importhtml()` function to get the whole thing in one go.\n\nWe can't do that this time—it isn't a table. But we can use Google Sheets' more general `importxml()` function to gets lists of things, and we can tell it exactly what we want.\n\n:::{.callout-note}\nI've cheated and created this listing from a spreadsheet myself—but it mimics the sorts of listings you'll see on product listings and dashboards all over the internet.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(readxl)\nlibrary(yaml)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/jgol0005/Code/training/training-datajournalism-scraping\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nzip_path <- here(\"scraping-cards\", \"vic-stats.zip\")\nzip_url <- paste0(\n  \"https://www.abs.gov.au/\",\n  \"census/find-census-data/datapacks/download/\",\n  \"2021_GCP_SAL_for_VIC_short-header.zip\")\ndownload.file(zip_url, zip_path)\nunzip(zip_path, exdir = here(\"scraping-cards\", \"data\"))\nfile.rename(\n  here(\"scraping-cards\", \"data\", \"2021 Census GCP Suburbs and Localities for VIC\"),\n  here(\"scraping-cards\", \"data\", \"Responses\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in file.rename(here(\"scraping-cards\", \"data\", \"2021 Census GCP Suburbs\nand Localities for VIC\"), : cannot rename file\n'/Users/jgol0005/Code/training/training-datajournalism-scraping/scraping-cards/data/2021\nCensus GCP Suburbs and Localities for VIC' to\n'/Users/jgol0005/Code/training/training-datajournalism-scraping/scraping-cards/data/Responses',\nreason 'Directory not empty'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# suburb codes and names\nhere(\"scraping-cards\", \"data\", \"Metadata\",\n  \"2021Census_geog_desc_1st_2nd_3rd_release.xlsx\") |>\n  read_excel(sheet = \"2021_ASGS_Non_ABS_Structures\") |>\n  filter(ASGS_Structure == \"SAL\") |>\n  select(Code = Census_Code_2021, Name = Census_Name_2021) ->\nsuburb_map\n\n# total population\nhere(\"scraping-cards\", \"data\", \"Responses\", \"2021Census_G01_VIC_SAL.csv\") |>\n  read_csv(col_select = c(SAL_CODE_2021, Tot_P_P)) |>\n  mutate(`Total population` = as.integer(Tot_P_P)) |>\n  select(SAL_CODE_2021, `Total population`) ->\npopulation\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2946 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): SAL_CODE_2021\ndbl (1): Tot_P_P\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# income and rent\nhere(\"scraping-cards\", \"data\", \"Responses\", \"2021Census_G02_VIC_SAL.csv\") |>\n  read_csv(col_select =\n    c(SAL_CODE_2021, Median_rent_weekly, Median_tot_fam_inc_weekly)) |>\n  rename(\n    `Median weekly rent` = Median_rent_weekly,\n    `Median weekly family income` = Median_tot_fam_inc_weekly) ->\nincome_and_rent\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2946 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): SAL_CODE_2021\ndbl (2): Median_rent_weekly, Median_tot_fam_inc_weekly\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# commuting:\n# we just want the most popular commute method for each area,\n# which i'll encode as emoji\nhere(\"scraping-cards\", \"data\", \"Responses\", \"2021Census_G62_VIC_SAL.csv\") |>\n  read_csv(\n    col_types = cols(SAL_CODE_2021 = col_character(), .default = col_integer()),\n    col_select = c(SAL_CODE_2021, ends_with(\"_P\"))) |>\n  select(SAL_CODE_2021, matches(\"One_method\"), matches(\"Two_methods\"),\n    matches(\"Three_meth\"), -matches(\"Tot\")) |>\n  pivot_longer(-SAL_CODE_2021, names_to = \"method\", values_to = \"count\") |>\n  filter(count > 0) |>\n  group_by(SAL_CODE_2021) |>\n  slice_max(count, n = 1) |>\n  ungroup() |>\n  mutate(\"Most popular commute method\" = str_replace_all(method, c(\n    \"Train\" = \"🚂\",\n    \"Trn\" = \"🚂\",\n    \"Bus\" = \"🚌\",\n    \"Ferry\" = \"⛴️\",\n    \"Car_as_driver\" = \"🚗 D\",\n    \"Car_as_drvr\" = \"🚗 D\",\n    \"Car_as_passenger\" = \"🚗 P\",\n    \"Car_as_pass\" = \"🚗 P\",\n    \"Truck\" = \"🚚\",\n    \"Motorbike_scootr\" = \"🛵\",\n    \"Other\" = \"❓\",\n    \"Walked_only\" = \"🚶🏻\",\n    \"_P\" = \"\",\n    \"Tr_2_oth_meth\" = \"🚂 + 2\",\n    \"Othr_three_meth\" = \"❓ + 2\",\n    \"One_method\" = \"\",\n    \"Two_methods\" = \"\",\n    \"Three_meth\" = \"\",\n    \"_\" = \" \"))) |>\n  select(-method, -count) ->\ncommuting_mostpopular\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# join and write out to yaml (so we can make a listing)\npopulation |>\n  left_join(income_and_rent, join_by(SAL_CODE_2021)) |>\n  left_join(income_and_rent, join_by(SAL_CODE_2021)) |>\n  left_join(commuting_mostpopular, join_by(SAL_CODE_2021)) |>\n  left_join(suburb_map, join_by(SAL_CODE_2021 == Code)) |>\n  select(Name, Code = SAL_CODE_2021, everything()) |>\n  mutate(`Total population` = as.integer(`Total population`)) |>\n  filter(`Total population` > 0) ->\njoined\n\nwrite_yaml(joined, here(\"scraping-cards\", \"suburbs.yml\"), column.major = FALSE)\n```\n:::\n\n:::\n\n:::{#suburbs}\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}